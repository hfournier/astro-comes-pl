---
import AsideLayout from "@layouts/AsideLayout.astro"
import { getEntries } from "astro:content"

const { tags } = Astro.props
const tagEntries = tags && tags.length > 0 ? await getEntries<"tags">(tags) : undefined

const getUrl = (tagId: string) => {
	const url = new URL(Astro.url.href)
	url.pathname = url.pathname.slice(0, url.pathname.lastIndexOf("/"))
	if (url.searchParams.has("tags")) {
		const tagParams = url.searchParams.get("tags")?.slice(1, -1).split(",")
		if (tagParams) {
			const tagIndex = tagParams.indexOf(tagId)
			if (tagIndex !== -1) {
				tagParams.splice(tagIndex, 1)
			} else {
				tagParams.push(tagId)
			}
			if (tagParams.length === 0) {
				url.searchParams.delete("tags")
			} else {
				url.searchParams.set("tags", `[${tagParams.join(",")}]`)
			}
		}
	} else {
		url.searchParams.set("tags", `[${tagId}]`)
	}
	return url.href
}
const isSelectedTag = (tagId: string) => {
	const url = new URL(Astro.url.href)
	if (url.searchParams.has("tags")) {
		const tagParams = url.searchParams.get("tags")?.slice(1, -1).split(",")
		if (tagParams) {
			return tagParams.indexOf(tagId) !== -1
		}
	}
	return false
}
---

{
	tagEntries && tagEntries.length > 0 && (
		<AsideLayout title="Tags:">
			<ul class="flex flex-wrap gap-2 pl-4">
				{tagEntries.map((tag) => (
					<li
						class="rounded border-neutral-600"
						class:list={[
							{ "border bg-neutral-200": !isSelectedTag(tag.id) },
							{ "border-2 font-semibold": isSelectedTag(tag.id) }
						]}
					>
						<a class="flex h-full items-center" href={getUrl(tag.id)}>
							<div class="px-1.5 text-sm">{tag.data.name}</div>
							<div class="self-stretch bg-neutral-600 px-1.5 pt-0.5 text-xs text-neutral-100">
								{tag.data.count}
							</div>
						</a>
					</li>
				))}
			</ul>
		</AsideLayout>
	)
}
